name: BrainBytes CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      # Frontend linting
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Lint frontend code
        working-directory: ./frontend
        run: |
          npm run lint -- --format json --output-file eslint-report.json || echo "Frontend linting failed but continuing workflow"
      
      - name: Annotate Frontend ESLint results
        uses: ataylorme/eslint-annotate-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "./frontend/eslint-report.json"
      
      # Backend linting
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Lint backend code
        working-directory: ./backend
        run: |
          npm run lint -- --format json --output-file eslint-report.json || echo "Backend linting failed but continuing workflow"
      
      - name: Annotate Backend ESLint results
        uses: ataylorme/eslint-annotate-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "./backend/eslint-report.json"

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      # Frontend tests
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
      
      - name: Run frontend tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage
      
      # Backend tests
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run backend tests
        working-directory: ./backend
        run: npm test
      
      - name: Run backend tests with coverage
        working-directory: ./backend
        run: npm run test:coverage
      
      # E2E tests
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        working-directory: ./e2e-tests
        run: npm run test:e2e
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            backend/coverage
            frontend/coverage
      
      - name: Check for vulnerabilities
        run: npm audit --json || true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: brainbytes/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: brainbytes/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          docker-compose ps
          docker-compose down
      
      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-outputs
          path: |
            frontend/build
            backend/dist